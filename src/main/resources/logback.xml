<?xml version="1.0" encoding="utf-8" ?>
<!--每60s感知程序的变化并刷新，不用再重新启动服务器来刷新，debug如果是true，则会打印出logback内部的日志-->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <!--    定义参数常量（全局变量）-->
    <!--    trace < debug < info < warn < error-->
    <!--    logger.trace("msg") logger.debug("msg")... 如果value为info, 则不会显示logger.trace("msg") logger.debug("msg"), 只会显示logger.info, logger.warn, logger.error-->
    <!--    常用的level: debug, info, error-->
    <property name="log.level" value="debug" />
    <!--    历史日志文件最大将保留20个-->
    <property name="log.maxHistory" value="20" />
    <!--    日志存储的跟路径，catalina.base存储了tomcat实例根目录-->
    <property name="log.filePath" value="${catalina.base}/logs/webapps" />
    <!--    日志展现格式-->
    <!--    日期输出的格式，用哪个线程输出，哪个级别的日志，是哪个package下面的哪个类里面的信息，msg表示信息，n是换行-->
    <property name="log.pattern" value="%d{yyyy-MM-dd HH:mm:ss.SS} [%thread] %-5level %logger{50} - %msg%n" />

    <!--    指定日志输出的目的地-->

    <!--    输出媒介，console中输出-->
    <appender name="consoleAppender" class="ch.qos.logback.core.ConsoleAppender">
        <!--        encoder。layout，格式化日志的输出。encoder类似于layout，除了将一组event转换成字符串，还会将字符串输出到指定文件位置-->
        <encoder>
            <pattern>${log.pattern}</pattern>
        </encoder>
    </appender>

    <!--    输出媒介，DEBUG中输出-->
    <!--    随着size的增大，滚动出新的日志文件。或随时间的推移，按天或者按月，滚动出新的日志文件-->
    <appender name="debugAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--        文件路径-->
        <file>${log.filePath}/debug.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--            文件名称-->
            <fileNamePattern>${log.filePath}/debug/debug.%d{yyyy-MM-dd}.log.gz</fileNamePattern>
            <!--            文件最大保存历史数量-->
            <maxHistory>${log.maxHistory}</maxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>${log.pattern}</pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>DEBUG</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!--    INFO-->
    <!--    随着size的增大，滚动出新的日志文件。或随时间的推移，按天或者按月，滚动出新的日志文件-->
    <appender name="infoAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--        文件路径-->
        <file>${log.filePath}/info.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--            文件名称-->
            <fileNamePattern>${log.filePath}/info/info.%d{yyyy-MM-dd}.log.gz</fileNamePattern>
            <!--            文件最大保存历史数量-->
            <maxHistory>${log.maxHistory}</maxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>${log.pattern}</pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!--    ERROR-->
    <!--    随着size的增大，滚动出新的日志文件。或随时间的推移，按天或者按月，滚动出新的日志文件-->
    <appender name="errorAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--        文件路径-->
        <file>${log.filePath}/error.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--            文件名称-->
            <fileNamePattern>${log.filePath}/info/error.%d{yyyy-MM-dd}.log.gz</fileNamePattern>
            <!--            文件最大保存历史数量-->
            <maxHistory>${log.maxHistory}</maxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>${log.pattern}</pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!--    logger，存放日志对象，告诉logback需要关注哪个package下面的信息-->
    <logger name="com.imooc.o2o" level="${log.level}" additivity="true">
        <appender-ref ref="debugAppender" />
        <appender-ref ref="infoAppender" />
        <appender-ref ref="errorAppender" />
    </logger>
    <!--    root,根logger-->
    <root level="info">
        <appender-ref ref="consoleAppender" />
    </root>
</configuration>